<?php
namespace Npc\Helper\Phalcon\Model;

/**
 * Class ModelResource
 * @package Npc\Helper\Phalcon\Model
 */
class ModelResource extends ModelBase
{
    /**
     * @return string
     */
    public function getResourceName(): string
    {
        return '';
    }

    public static function fetch($parameters = null): ?self
    {
        return parent::findFirst($parameters); // TODO: Change the autogenerated stub
    }

    public static function fetchMany($parameters = null)
    {
        return parent::find($parameters); // TODO: Change the autogenerated stub
    }

    /**
     * 状态流转检测
     * @param ModelResource $obj
     * @param string $field_name
     * @param int $next_state
     * @return bool
     * @throws Exception
     */
    public static function FSMCheck(self $obj, string $field_name = '', int $next_state = 0)
    {
        $fsm = constant(get_class($obj) . '::' . strtoupper($field_name) . '_FSM');
        if ($fsm) {
            if (in_array($next_state, $fsm[$obj->{$field_name}][1])) {
                return true;
            }
            throw new Exception($obj->getResourceName() . '状态流转错误！[' . ($fsm[$obj->{$field_name}][0] ?? '未知') . '->' . ($fsm[$next_state][0] ?? '未知') . ']');
        }
    }

    /**
     * 状态校验
     * @param ModelResource $obj
     * @param string $field_name
     * @param array $states
     * @return bool
     * @throws Exception
     */
    public static function FSMRequire(self $obj, string $field_name = '', array $states = [])
    {
        $fsm = constant(get_class($obj) . '::' . strtoupper($field_name) . '_FSM');
        if ($fsm) {
            if (in_array($obj->{$field_name}, $states)) {
                return true;
            }
        }
        $msg = [];
        foreach ($states as $state) {
            $msg[] = $fsm[$state][0] ?? $state;
        }
        throw new Exception('状态异常错误！' . $obj->getResourceName() . '当前状态 ' . ($fsm[$obj->{$field_name}][0] ?? $obj->{$field_name}) . ' 不满足执行此操作所需的 ' . implode('、', $msg) . ' 等状态要求');
    }

    /**
     * 检测状态不能为指定的状态
     *
     * @param ModelResource $obj
     * @param string $field_name
     * @param array $states
     * @throws Exception
     */
    public static function FSMExclude(self $obj, string $field_name = '', array $states = [])
    {
        $fsm = constant(get_class($obj) . '::' . strtoupper($field_name) . '_FSM');
        if ($fsm) {
            $msg = [];
            foreach ($states as $state) {
                $msg[] = $fsm[$state][0] ?? $state;
            }
            if (in_array($obj->{$field_name}, $states)) {
                throw new Exception('状态异常错误！' . $obj->getResourceName() . '当前状态 ' . ($fsm[$obj->{$field_name}][0] ?? $obj->{$field_name}) . ' 属于禁止执行的 ' . implode('、', $msg) . ' 状态之一]');
            }
        }
    }

    public static function GetConstDefinition(self $obj, string $field_name = '', string $value)
    {
        $definition = constant(get_class($obj) . '::' . strtoupper($field_name) . '_DEFINITION');
        return $definition[$value] ?? '';
    }

    public static function explodeImplode($str = '')
    {
        $a = explode(',', $str);
        $r = [];
        foreach ($a as $v) {
            $v = trim($v);
            $v !== '' && $r[$v] = $v;
        }
        return implode(',', array_values($r));
    }

    public static function explode($str = '')
    {
        $a = explode(',', $str);
        $r = [];
        foreach ($a as $v) {
            $v = trim($v);
            $v !== '' && $r[$v] = $v;
        }
        return $r;
    }

    /**
     * 切换某字段 0 => 1 => 0
     * @param int $recordId
     * @param string $property
     * @return mixed
     * @throws Exception
     */
    public static function propertySwitch(int $recordId, string $property)
    {
        $record = self::fetch($recordId);
        $record->{$property} = $record->{$property} ? 0 : 1;;

        if (!$record->update()) {
            throw new Exception($record->getErrorMessage());
        }

        return $record->{$property};
    }
}